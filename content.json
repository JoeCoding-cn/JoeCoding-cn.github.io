{"pages":[{"title":"About Me","text":"一名练习时长两年半的Java练习生 在深圳工作 技术栈: Java Golang Python Angular PHP","link":"/about/index.html"}],"posts":[{"title":"(一) Hexo + Icarus  搭建静态博客","text":"为什么要自建博客？(都是废话，可以跳过看下面的)在之前我记录一些笔记的时候用过CSDN，后面用过一段时间简书、印象笔记、有道云啥的都有用过，CSDN的排版个人感觉总是很别扭, 后面就想着自己给搭建一个博客。 现在网上非常多的开源博客 WordPress、Ghost、Halo、Hexo之类的，主要分为动态、静态两类。自己看了看案例对比最后选择了Hexo这个静态博客 ，以上博客有些啥区别可以自行百度了解 。 为什么选择Hexo？正如Hexo官网描述所说 快速、简洁且高效的博客框架 Hexo支持Markdown 平时自己写好md文件之后编译之后就成了html格式了 支持部署到GithubPages Hexo只需要一条指令就能发布到GitPage 我选择Hexo还有一个原因就是穷~ 买不起云服务器 咱们就利用Gitee或者是Github的Pages空间配合Hexo来搭建一个自己的博客! (一) 搭建Hexo所需环境确保电脑有安装 Node Npm Hexo是基于Node构建的，没有的自行安装 推荐最新稳定版. 安装之后最好修改一下Npm的国内镜像仓库。npm默认简直是龟速，有梯子的小伙伴当我没说 我这边使用的是淘宝仓库 本文所使用的版本 node:v12.18.1 npm:6.14.5 (二) 安装Hexo1.安装 打开终端 执行 npm install hexo-cli -g 全局安装Hexo. 2.创建博客 hexo init blog blog就是博客根目录 cd blog 进入博客目录 npm install 安装依赖 hexo server 或者 hexo s 启动服务 不出意外控制台会输出 123&gt; hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 浏览器打开 http://localhost:4000 (三) 选择主题在blog初始化的时候hexo就默认下载了landscape主题，对比了很多款 我现在正在用的这款是icarus 也可以到hexo的主题列表里面自己选择https://hexo.io/themes/ 下载 进入博客根目录 cd blog git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 下载完成之后需要修改配置在blog文件夹下 _config.yml文件 所有配置基本都在这里 找到theme: landscape 修改为theme: icarus 重启服务即可. 常见问题修改了主题之后执行 hexo server可能会有如下报错 这是因为icarus主题所需的依赖没有安装. 12345678910111213141516171819❯ hexo serverINFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO === Checking package dependencies ===ERROR Package bulma-stylus is not installed.ERROR Package hexo-component-inferno is not installed.ERROR Package hexo-renderer-inferno is not installed.ERROR Package inferno is not installed.ERROR Package inferno-create-element is not installed.ERROR Please install the missing dependencies your Hexo site root directory:ERROR npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.4.0 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3ERROR or:ERROR yarn add bulma-stylus@0.8.0 hexo-component-inferno@^0.4.0 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 按照提示安装依赖 1npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.4.0 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3 再次启动服务就ok了 (四) 开始写作hexo默认是使用的markdown，执行hexo new 文章名 默认会在./source/_posts/ 文件夹下创建 文章名.md文件 同理 也可以把自己已经写好的.md文件放到这个目录下 然后执行 hexo g &amp;&amp; hexo s 打开浏览器就能看到编译好的html了 1234567891011121314❯ hexo new testInferno is in development mode.INFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO === Checking package dependencies ===INFO === Checking the configuration file ===INFO === Registering Hexo extensions ===INFO Created: ~/JoeSpace/Blogs/joejay/source/_posts/test.md (五) hexo常用命令123456789101112131415❯ hexo helpCommands: clean Remove generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. help Get help on a command. init Create a new Hexo folder. list List the information of the site migrate Migrate your site from other system to Hexo. new Create a new post. publish Moves a draft post from _drafts to _posts folder. render Render files with renderer plugins. server Start the server. version Display version information. 经常使用到的就是 clean new server deploy 具体用法可以参考官方文档http://hexo.io/docs/ 官网也有中文","link":"/2020-09-23/(%E4%B8%80)%20Hexo%20+%20Icarus%20%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"title":"(三) 给你的博客添加看板娘(Live2D)HEXO+icarus","text":"版本icarus &lt; 3.0 HEXO+icarus主题 给博客添加看板娘(Live2D) 最近在很多博客左下角或者右下角有看到小人(看板娘)，折腾了一番搜到的都没有达到预期的效果，并且大多数教程都是基于Next来做的，本人使用的主题是Icarus，跟Next有细微的区别。后面找到了大神的作品，本次教程基于Hexo+Icarus添加的看板娘(Live2D) 参考博客 张书樵 梆子井欢喜坨 潘高 Icarus3请移步 传送门 效果展示 教程1、把大神已修改好的代码托管在Github [源码](https://github.com/stevenjoezhang/live2d-widget) 下载到hexo目录下的`/themes/icarus/source`下下载好的文件名`live2d-widget` 2、进入`live2d-widget` 修改`autoload.js` 1234// 把这个替换掉const live2d_path = \"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/\";// 替换为const live2d_path = \"/live2d-widget/\"; 这个live2d_path是指刚才下载的源码存放的目录，在icarus中就会以hexo/theme/icarus/source 为根目录 ，刚才下载的源码放在这个位置所以这里的live2d_path 就是源码存放的位置 3、**重点** 不加会没有效果 在/themes/icarus/layout 中编辑 layout.ejs 加入以下依赖到&lt;head&gt;&lt;/head&gt;内 再次申明博主锁使用的是icarus 主题 如果是Next 主题则对应的文件是 /themes/next/layout/_layout.swig 123&lt;script src=\"https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css\"/&gt;&lt;script src=\"/live2d-widget/autoload.js\"&gt;&lt;/script&gt; 4、编辑主题的配置文件`_config.yml` 12live2d: enable: true 保存之后执行 `hexo clean &amp;&amp; hexo g &amp;&amp; hexo s` 查看效果大功告成想修改看板娘大小、位置、格式、文本内容等，可查看并修改live2d-widget 下的 &gt; waifu-tips.js 、 waifu-tips.json 、 waifu.css live2D模型地址：https://github.com/summerscar/live2dDemo live2D部分模型预览:https://huaji8.top/post/live2d-plugin-2.0/","link":"/2020-09-23/(%E4%B8%89)%20%E7%BB%99%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98(Live2D)HEXO+icarus/"},{"title":"(二) icarus主题配置","text":"作者资料卡你可以启用作者资料卡挂件来展示文章作者/网站站长的信息。 资料卡的配置如下所示： 编辑icarus下_config.yml 1234567891011121314151617181920212223242526widgets: # Profile widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: profile # 作者名称 author: Joe # 作者头衔 # author_title: java-coding ## 作者所在地 location: 中国·深圳 # 头像图片地址 avatar: https://joe-1253912574.cos.ap-shenzhen-fsi.myqcloud.com/images/IMG_1292(20200629-005627).jpg # 是否显示圆形头像 avatar_rounded: true # Gravatar邮箱(如不设置`avatar`项) gravatar: joe-code@foxmail.com # 关注按钮链接地址 follow_link: 'https://gitee.com/joejay' # 社交媒体链接 social_links: Github: icon: fab fa-github url: 'https://github.com/ppoffice' 这个头像我设置之后也没生效… 一气之下直接写死了。在目录themes/icarus/layout/widget下有个profile.jsx 找到38行编辑图片src地址 1&lt;img class={'avatar' + (avatarRounded ? ' is-rounded' : '')} src='你的头像地址' alt={author} /&gt; 文章目录编辑icarus下_config.yml 默认开启 1234widgets: - type: toc position: left #展示位置 左或右 在需要显示目录的文章的.md开头插入 1234toc: true---文章内容... 友链编辑icarus下_config.yml 默认开启 12345678widgets: - position: left type: links # 友站名称与链接 links: LinkedBear: 'https://juejin.im/user/5d9c4a7b518825427b27645f' BugStack: 'https://bugstack.cn' 最新文章编辑icarus下_config.yml 默认开启 1234widgets: - position: right type: recent_posts 文章归档编辑icarus下_config.yml 默认开启 1234widgets: - position: right type: archives 文章分类编辑icarus下_config.yml 默认开启 1234widgets: - position: right type: categories 文章标签编辑icarus下_config.yml 默认开启 1234widgets: - position: right type: tags 在需要显示目录的文章的.md开头插入 1234567toc: truetags: - hexo - icarus - 博客---博客内容 国际化hexo支持国际化, icarus主题自带了多个语言 进入到blog目录下 /themes/icarus/languages 可以看到这里已经内置了中文简体 接下来修改配置文件_config.yml 需要注意的是 _config.yml 有两个 一个是hexo的 一个是icarus主题的 icarus的配置文件在 /themes/icarus/_config.yml 我们需要修改的是hexo的_config.yml 千万不能搞错了 修改languages为 zh-CN 繁体就是zh-TW咯上图文件夹下有的都可以配置 或者你也可以自定义国际化,随便打开一个yml照着改就行了","link":"/2020-09-23/(%E4%BA%8C)%20icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"},{"title":"Feign调用报错 feign.RetryableException: too many bytes written executing post","text":"SpringCloud Feign调用报错feign.RetryableException: too many bytes written executing版本: SpringCloud : Greenwich.SR5 SpringBoot : 2.1.9.RELEASE SpringCloudAlibaba : 2.1.0.RELEASE 看到这个错误第一时间我也是打开百度/Goole 但是搜出来的，无一例外 基本都是添加feign增强包 feign-httpclient 或者feign-okhttp 包; 无奈之下只好一步步debug 发现是把request.body 写入到流时发生的错误.java.io.IOException: insufficient data written 后面搜到body是跟Content-Length 有关系的… 附上博主链接 https://my.oschina.net/u/4410077/blog/3323588 看了之后 原来发生这个问题的原因跟我一样，因为服务之间调用需要携带一些用户信息之类的 所以实现了Feign的RequestInterceptor拦截器复制请求头，复制的时候是所有头都复制的,可能导致Content-length长度跟body不一致. 所以只需要判断如果是Content-length就跳过 原配置 : 1234567891011121314151617181920212223242526/** * @author Joe * createTime 2020/06/10 18:13 */@Log4j2@Configurationpublic class FeignConfiguration implements RequestInterceptor { @Override public void apply(RequestTemplate template) { ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder .getRequestAttributes(); HttpServletRequest request = attributes.getRequest(); Enumeration&lt;String&gt; headerNames = request.getHeaderNames(); if (headerNames != null) { while (headerNames.hasMoreElements()) { String name = headerNames.nextElement(); String values = request.getHeader(name); template.header(name, values); } } else { log.info(\"feign interceptor error header:{}\", template); } }} 修改之后: 123456789101112131415161718192021222324252627282930/** * @author Joe * createTime 2020/06/10 18:13 */@Log4j2@Configurationpublic class FeignConfiguration implements RequestInterceptor { @Override public void apply(RequestTemplate template) { ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder .getRequestAttributes(); HttpServletRequest request = attributes.getRequest(); Enumeration&lt;String&gt; headerNames = request.getHeaderNames(); if (headerNames != null) { while (headerNames.hasMoreElements()) { String name = headerNames.nextElement(); String values = request.getHeader(name); // 跳过 content-length if (name.equals(\"content-length\")){ continue; } template.header(name, values); } } else { log.info(\"feign interceptor error header:{}\", template); } }} content-length详解参考文章 ：https://juejin.im/post/5d772cb4e51d453b5f1a0502","link":"/2020-09-23/Feign%E8%B0%83%E7%94%A8%E6%8A%A5%E9%94%99%20feign.RetryableException:%20too%20many%20bytes%20written%20executing%20post/"},{"title":"Nacos 单机、集群安装 Mysql持久化","text":"Nacos 单机、集群安装 Mysql持久化关于Nacos是什么 跟Eureka Consul Etcd ZooKeeper等等注册中心有啥区别。这里就不提了 都能搜得到 ,我们公司使用Nacos做注册中心配置中心已经有一年多的时间了。一直很稳定 这里主要就写一下Nacos单机与集群的安装配置 数据持久化用mysql 这里为了演示只配置了一个mysql服务 环境nacos提供二进制包跟源代码两种方式 Java版本必须大于1.8 并且配置环境变量 操作系统 : CentOS Linux release 7.8 Java版本: 大于1.8 Nacos版本 : 1.3.1 Nacos下载nacos所有版本均托管在github https://github.com/alibaba/nacos/releases 选择一个较新的稳定版下载二进制压缩包就可以了 我这里选择的是 1.3.1 安装12unzip nacos-server-$version.zip 或者 tar -xvf nacos-server-$version.tar.gzcd nacos/bin 配置mysql持久化解压压缩包之后 在 nacos/conf下有nacos-mysql.sql 脚本 ,新建个数据库导入 1.3.1的脚本有12张表 编辑nacos配置文件application.properties 添加如下配置 12345678#指定数据源为mysqlspring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://192.168.124.36:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true#用户名db.user=root #密码db.password=root 单机启动linux/osx: sh startup.sh -m standalone Windows: cmd startup.cmd 集群启动nacos集群非常简单 案例使用三台centos搭建集群 10.211.55.4、10.211.55.5、10.211.55.6 分别在三台机器上安装nacos 新建cluster.conf文件 12310.211.55.4:884810.211.55.5:884810.211.55.6:8848 保存之后三台机器分别启动 执行 ``sh startup.sh` 浏览器打开http://ip:port/nacos 访问nacos可视化页面 例如http://10.211.55.4:8848/nacos 用户名:密码 默认 nacos : nacos 找到集群管理 &gt; 节点列表 就可以看到刚才启动的三台在线了 8848是nacos的默认端口如果想修改则编辑application.properties 找到server.port=8848修改为你的端口","link":"/2020-09-23/Nacos%20%E5%8D%95%E6%9C%BA%E3%80%81%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%20Mysql%E6%8C%81%E4%B9%85%E5%8C%96/"},{"title":"一、SpringCloud工程搭建及Nacos服务注册发现","text":"工程结构我就用的是父子模块的Maven工程 所有的服务都在父工程下方便管理 源码地址 : https://github.com/JoeCoding-cn/spring-cloud 父工程idea创建一个空的maven项目 用于管理子模块 以及jar包版本管理 父工程pom.xml如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;joe.space&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!-- 版本控制其他配置 --&gt; &lt;properties&gt; &lt;spring-cloud.version&gt;Hoxton.SR6&lt;/spring-cloud.version&gt; &lt;spring-boot.version&gt;2.3.1.RELEASE&lt;/spring-boot.version&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.build.version&gt;3.8.1&lt;/maven.build.version&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;lang3.version&gt;3.9&lt;/lang3.version&gt; &lt;guava.version&gt;29.0-jre&lt;/guava.version&gt; &lt;hutool.version&gt;5.1.0&lt;/hutool.version&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;!-- SpringBoot SpringCloud版本管理 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-boot.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;!-- 打包插件依赖管理 --&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;version&gt;${spring-boot.version}&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;${maven.build.version}&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;${maven.compiler.target}&lt;/source&gt; &lt;target&gt;${maven.compiler.source}&lt;/target&gt; &lt;encoding&gt;${encoding}&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; 父工程结构: 子工程 Comsumer Producer在父工程下分别创建comsumer producer 两个模块，同样也是maven工程 producer pom.xml 1234567891011121314151617181920212223242526272829&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;spring-cloud&lt;/artifactId&gt; &lt;groupId&gt;joe.space&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;producer&lt;/artifactId&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;/project&gt; consumer pom.xml 1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;spring-cloud&lt;/artifactId&gt; &lt;groupId&gt;joe.space&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;consumer&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 在启动类加上@EnableDiscoveryClient 注解 最后配置上nacos的地址 以及服务名 123456789spring: cloud: nacos: discovery: server-addr: 10.211.55.4:8848 application: name: consumerserver: port: 8763 启动服务 打开nacos管理页面地址 的服务列表 不出意外两个服务就注册上来了 用了nacos之后真的是非常简单","link":"/2020-09-23/%E4%B8%80%E3%80%81SpringCloud%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA%E5%8F%8ANacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/"},{"title":"记一次RestControllerAdvice无法拦截Filter内抛出异常","text":"今天有同事用到Shiro使用JWT的时候在Filter里做身份验证，然后在里面catch捕获并抛出了自定义异常。我们这边是用的RestControllerAdvice做统一异常处理，然后这个异常并没有被RestControllerAdvice所拦截到 原因请求进来 会按照 filter -&gt; interceptor -&gt; controllerAdvice -&gt; aspect -&gt; controller的顺序调用 当controller返回异常 也会按照controller -&gt; aspect -&gt; controllerAdvice -&gt; interceptor -&gt; filter来依次抛出 这种Filter发生的404、405、500错误都会到Spring默认的异常处理。如果你在配置文件配置了server.error.path的话，就会使用你配置的异常处理地址，如果没有就会使用你配置的error.path路径地址，如果还是没有，默认使用/error来作为发生异常的处理地址。如果想要替换默认的非Controller异常处理直接实现Spring提供的ErrorController接口就行了 解决方案新建一个ErrorControllerImpl 实现ErrorController 把ErrorPath 指向error 再写一个方法把Error抛出 然后Controller全局统一异常处理RestControllerAdvice就能捕获到异常了 12345678910111213141516171819202122232425262728import org.springframework.boot.web.servlet.error.ErrorController;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;/** * @author Joe * createTime 2020/07/27 14:39 * mail joe-code@foxmail.com */@Controllerpublic class ErrorControllerImpl implements ErrorController { @Override public String getErrorPath() { return \"/error\"; } @RequestMapping(\"/error\") public void handleError(HttpServletRequest request) throws Throwable { if (request.getAttribute(\"javax.servlet.error.exception\") != null) { throw (Throwable) request.getAttribute(\"javax.servlet.error.exception\"); } }} 参考stackoverflow链接 https://stackoverflow.com/questions/34595605/how-to-manage-exceptions-thrown-in-filters-in-spring","link":"/2020-09-23/%E8%AE%B0%E4%B8%80%E6%AC%A1RestControllerAdvice%E6%97%A0%E6%B3%95%E6%8B%A6%E6%88%AAFilter%E5%86%85%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8/"},{"title":"记一次windows缺少python2.7支持引起的&#39;npm ERR&#39;","text":"背景刚换过主机装好环境 git clone下vue项目 照常执行npm install 然后就看到报错信息如下 12345678910npm ERR! code ELIFECYCLEnpm ERR! errno 1npm ERR! node-sass@4.13.1 postinstall: `node scripts/build.js`npm ERR! Exit status 1npm ERR!npm ERR! Failed at the node-sass@4.13.1 postinstall script.npm ERR! This is probably not a problem with npm. There is likely additional logging output above.npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\Joe\\AppData\\Roaming\\npm-cache\\_logs\\2020-09-18T06_32_51_442Z-debug.log 起初以为是安装sass没开代理的原因. 设置了淘宝镜像之后还是报错 ，然后往上翻 看到了这一段日志 1234567891011121314151617181920gyp verb check python checking for Python executable &quot;python2&quot; in the PATHgyp verb `which` failed Error: not found: python2gyp verb `which` failed at getNotFoundError (D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:13:12)gyp verb `which` failed at F (D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:68:19)gyp verb `which` failed at E (D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:80:29)gyp verb `which` failed at D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:89:16gyp verb `which` failed at D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\isexe\\index.js:42:5gyp verb `which` failed at D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\isexe\\windows.js:36:5gyp verb `which` failed at FSReqCallback.oncomplete (fs.js:176:21)gyp verb `which` failed python2 Error: not found: python2gyp verb `which` failed at getNotFoundError (D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:13:12)gyp verb `which` failed at F (D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:68:19)gyp verb `which` failed at E (D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:80:29)gyp verb `which` failed at D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\which\\which.js:89:16gyp verb `which` failed at D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\isexe\\index.js:42:5gyp verb `which` failed at D:\\workSpace\\e-c\\grb\\grb4vp\\node_modules\\isexe\\windows.js:36:5gyp verb `which` failed at FSReqCallback.oncomplete (fs.js:176:21) {gyp verb `which` failed code: 'ENOENT'gyp verb `which` failed }gyp verb check python checking for Python executable &quot;python&quot; in the PATH 一查才知道是没有python支持 解决方案打开PowerShell 以管理员身份运行 执行以下操作 1npm install --global --production windows-build-tools --registry=https://registry.npm.taobao.org 切记使用管理员身份运行PowerShell 不然会报错 Please restart this script from an administrative PowerShell!","link":"/2020-09-24/%E8%AE%B0%E4%B8%80%E6%AC%A1windows%E7%BC%BA%E5%B0%91python2.7%E6%94%AF%E6%8C%81%E5%BC%95%E8%B5%B7%E7%9A%84'npm%20ERR'/"},{"title":"Hexo+Icarus3+live2d给博客添加看板娘","text":"补坑之前写过一篇icarus添加看板娘的教程但是版本是&lt;Icarus3的 Icarus3改版很大，完全使用了jsx来代替了ejs，不过添加看板娘不管是jsx还是ejs差别都不大icarus3之前的教程博客 传送门 上一篇博客那时候拉的live2D还需要导入jQuery 2020年1月1日起，项目不再依赖于 jQuery。 这次我把live2d直接放到了主题文件夹下的source下面 跟js/css/img同级 下载live2D进入博客根目录 cd theme/icarus/source &amp;&amp; git clone https://github.com/stevenjoezhang/live2d-widget.git 修改配置1. 导入css依赖找到theme/icarus/layout/common/head.jsx 插入css依赖 大概是在一百四十多行的样子吧 或者可以在head.jsx内搜索&lt;link&gt;标签 然后插入这行 1&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css\"/&gt; 修改后完整的head.jsx 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159const { Component } = require('inferno');const MetaTags = require('hexo-component-inferno/lib/view/misc/meta');const OpenGraph = require('hexo-component-inferno/lib/view/misc/open_graph');const StructuredData = require('hexo-component-inferno/lib/view/misc/structured_data');const Plugins = require('./plugins');function getPageTitle(page, siteTitle, helper) { let title = page.title; if (helper.is_archive()) { title = helper._p('common.archive', Infinity); if (helper.is_month()) { title += ': ' + page.year + '/' + page.month; } else if (helper.is_year()) { title += ': ' + page.year; } } else if (helper.is_category()) { title = helper._p('common.category', 1) + ': ' + page.category; } else if (helper.is_tag()) { title = helper._p('common.tag', 1) + ': ' + page.tag; } else if (helper.is_categories()) { title = helper._p('common.category', Infinity); } else if (helper.is_tags()) { title = helper._p('common.tag', Infinity); } return [title, siteTitle].filter(str =&gt; typeof str !== 'undefined' &amp;&amp; str.trim() !== '').join(' - ');}module.exports = class extends Component { render() { const { env, site, config, helper, page } = this.props; const { url_for, cdn, fontcdn, iconcdn, is_post } = helper; const { url, meta_generator = true, head = {}, article, highlight, variant = 'default' } = config; const { meta = [], open_graph = {}, structured_data = {}, canonical_url = page.permalink, rss, favicon } = head; const language = page.lang || page.language || config.language; const fontCssUrl = { default: fontcdn('Ubuntu:wght@400;600&amp;family=Source+Code+Pro', 'css2'), cyberpunk: fontcdn('Oxanium:wght@300;400;600&amp;family=Roboto+Mono', 'css2') }; let hlTheme, images; if (highlight &amp;&amp; highlight.enable === false) { hlTheme = null; } else if (article &amp;&amp; article.highlight &amp;&amp; article.highlight.theme) { hlTheme = article.highlight.theme; } else { hlTheme = 'atom-one-light'; } if (typeof page.og_image === 'string') { images = [page.og_image]; } else if (helper.has_thumbnail(page)) { images = [helper.get_thumbnail(page)]; } else if (article &amp;&amp; typeof article.og_image === 'string') { images = [article.og_image]; } else if (page.content &amp;&amp; page.content.includes('&lt;img')) { let img; images = []; const imgPattern = /&lt;img [^&gt;]*src=['\"]([^'\"]+)([^&gt;]*&gt;)/gi; while ((img = imgPattern.exec(page.content)) !== null) { images.push(img[1]); } } else { images = [url_for('/img/og_image.png')]; } let adsenseClientId = null; if (Array.isArray(config.widgets)) { const widget = config.widgets.find(widget =&gt; widget.type === 'adsense'); if (widget) { adsenseClientId = widget.client_id; } } let openGraphImages = images; if ((typeof open_graph === 'object' &amp;&amp; open_graph !== null) &amp;&amp; ((Array.isArray(open_graph.image) &amp;&amp; open_graph.image.length &gt; 0) || typeof open_graph.image === 'string')) { openGraphImages = open_graph.image; } else if ((Array.isArray(page.photos) &amp;&amp; page.photos.length &gt; 0) || typeof page.photos === 'string') { openGraphImages = page.photos; } let structuredImages = images; if ((typeof structured_data === 'object' &amp;&amp; structured_data !== null) &amp;&amp; ((Array.isArray(structured_data.image) &amp;&amp; structured_data.image.length &gt; 0) || typeof structured_data.image === 'string')) { structuredImages = structured_data.image; } else if ((Array.isArray(page.photos) &amp;&amp; page.photos.length &gt; 0) || typeof page.photos === 'string') { structuredImages = page.photos; } return &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; {meta_generator ? &lt;meta name=\"generator\" content={`Hexo ${env.version}`} /&gt; : null} &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" /&gt; {meta &amp;&amp; meta.length ? &lt;MetaTags meta={meta} /&gt; : null} &lt;meta name=\"baidu-site-verification\" content=\"mhWv4NNMfG\" /&gt; &lt;meta name=\"google-site-verification\" content=\"aNBCEhnauRjyRi2s55JA4LemtzHTmgcHT43vigw9Qek\" /&gt; &lt;title&gt;{getPageTitle(page, config.title, helper)}&lt;/title&gt; {typeof open_graph === 'object' &amp;&amp; open_graph !== null ? &lt;OpenGraph type={open_graph.type || (is_post(page) ? 'article' : 'website')} title={open_graph.title || page.title || config.title} date={page.date} updated={page.updated} author={open_graph.author || config.author} description={open_graph.description || page.description || page.excerpt || page.content || config.description} keywords={page.keywords || (page.tags &amp;&amp; page.tags.length ? page.tags : undefined) || config.keywords} url={open_graph.url || page.permalink || url} images={openGraphImages} siteName={open_graph.site_name || config.title} language={language} twitterId={open_graph.twitter_id} twitterCard={open_graph.twitter_card} twitterSite={open_graph.twitter_site} googlePlus={open_graph.google_plus} facebookAdmins={open_graph.fb_admins} facebookAppId={open_graph.fb_app_id} /&gt; : null} {typeof structured_data === 'object' &amp;&amp; structured_data !== null ? &lt;StructuredData title={structured_data.title || config.title} description={structured_data.description || page.description || page.excerpt || page.content || config.description} url={structured_data.url || page.permalink || url} author={structured_data.author || config.author} date={page.date} updated={page.updated} images={structuredImages} /&gt; : null} {canonical_url ? &lt;link rel=\"canonical\" href={canonical_url} /&gt; : null} {rss ? &lt;link rel=\"alternative\" href={url_for(rss)} title={config.title} type=\"application/atom+xml\" /&gt; : null} {favicon ? &lt;link rel=\"icon\" href={url_for(favicon)} /&gt; : null} &lt;link rel=\"stylesheet\" href={iconcdn()} /&gt; {hlTheme ? &lt;link rel=\"stylesheet\" href={cdn('highlight.js', '9.12.0', 'styles/' + hlTheme + '.css')} /&gt; : null} &lt;link rel=\"stylesheet\" href={fontCssUrl[variant]} /&gt; &lt;link rel=\"stylesheet\" href={url_for('/css/' + variant + '.css')} /&gt; {/* 这行是live2d需要的css依赖 */} &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css\"/&gt; &lt;Plugins site={site} config={config} helper={helper} page={page} head={true} /&gt; {adsenseClientId ? &lt;script data-ad-client={adsenseClientId} src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\" async={true}&gt;&lt;/script&gt; : null} &lt;/head&gt;; }}; 2. 修改刚下载的live2d-widget 下的autoload.js注释掉第二行 //const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;; 放开第三行 const live2d_path = &quot;/live2d-widget/&quot;; 修改后的autoload.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 注意：live2d_path 参数应使用绝对路径//const live2d_path = \"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/\";const live2d_path = \"/live2d-widget/\";// 封装异步加载资源的方法function loadExternalResource(url, type) { return new Promise((resolve, reject) =&gt; { let tag; if (type === \"css\") { tag = document.createElement(\"link\"); tag.rel = \"stylesheet\"; tag.href = url; } else if (type === \"js\") { tag = document.createElement(\"script\"); tag.src = url; } if (tag) { tag.onload = () =&gt; resolve(url); tag.onerror = () =&gt; reject(url); document.head.appendChild(tag); } });}// 加载 waifu.css live2d.min.js waifu-tips.jsif (screen.width &gt;= 768) { Promise.all([ loadExternalResource(live2d_path + \"waifu.css\", \"css\"), loadExternalResource(live2d_path + \"live2d.min.js\", \"js\"), loadExternalResource(live2d_path + \"waifu-tips.js\", \"js\") ]).then(() =&gt; { initWidget({ waifuPath: live2d_path + \"waifu-tips.json\", //apiPath: \"https://live2d.fghrsh.net/api/\", cdnPath: \"https://cdn.jsdelivr.net/gh/fghrsh/live2d_api/\" //cdnPath: \"https://live2d.fghrsh.net/api/\" }); });}// initWidget 第一个参数为 waifu-tips.json 的路径，第二个参数为 API 地址// API 后端可自行搭建，参考 https://github.com/fghrsh/live2d_api// 初始化看板娘会自动加载指定目录下的 waifu-tips.json 3. 在主题内导入autoload.js 前提是 live2d-widget 的位置在theme/icarus/source下 找到theme/icarus/layout/common/scripts.jsx 在末尾处 &lt;Fragment&gt;标签内添加 1&lt;script src={url_for('/live2d-widget/autoload.js')}&gt;&lt;/script&gt; 添加后完整的scripts.jsx 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556const {Component, Fragment} = require('inferno');const Plugins = require('./plugins');module.exports = class extends Component { render() { const {site, config, helper, page} = this.props; const {url_for, cdn} = helper; const {external_link, article} = config; const language = page.lang || page.language || config.language || 'en'; let externalLink; if (typeof external_link === 'boolean') { externalLink = {enable: external_link, exclude: []}; } else { externalLink = { enable: typeof external_link.enable === 'boolean' ? external_link.enable : true, exclude: external_link.exclude || [] }; } let fold = 'unfolded'; let clipboard = true; if (article &amp;&amp; article.highlight) { if (typeof article.highlight.clipboard !== 'undefined') { clipboard = !!article.highlight.clipboard; } if (typeof article.highlight.fold === 'string') { fold = article.highlight.fold; } } const embeddedConfig = `var IcarusThemeSettings = { site: { url: '${config.url}', external_link: ${JSON.stringify(externalLink)} }, article: { highlight: { clipboard: ${clipboard}, fold: '${fold}' } } };`; return &lt;Fragment&gt; &lt;script src={cdn('jquery', '3.3.1', 'dist/jquery.min.js')}&gt;&lt;/script&gt; &lt;script src={cdn('moment', '2.22.2', 'min/moment-with-locales.min.js')}&gt;&lt;/script&gt; &lt;script dangerouslySetInnerHTML={{__html: `moment.locale(\"${language}\");`}}&gt;&lt;/script&gt; &lt;script dangerouslySetInnerHTML={{__html: embeddedConfig}}&gt;&lt;/script&gt; {clipboard ? &lt;script src={cdn('clipboard', '2.0.4', 'dist/clipboard.min.js')} defer={true}&gt;&lt;/script&gt; : null} &lt;Plugins site={site} config={config} page={page} helper={helper} head={false}/&gt; &lt;script src={url_for('/js/main.js')} defer={true}&gt;&lt;/script&gt; &lt;script src={url_for('/live2d-widget/autoload.js')}&gt;&lt;/script&gt; &lt;/Fragment&gt;; }}; 4. 开启live2d编辑主题配置文件_config.yml 添加 12live2d: enable: true 大功告成！ 备注看板娘到这儿应该就可以出来了 但是会发现在icarus的样式下面 这时候需要把看板娘给置顶 找到live2d-widget 下的waifu.css 修改33行 id为#waifu的样式 把z-index:1 修改为z-index:1000； 修改后的waifu.css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306#waifu-toggle { background-color: #fa0; border-radius: 5px; bottom: 66px; color: #fff; cursor: pointer; font-size: 12px; left: 0; margin-left: -100px; padding: 5px 2px 5px 5px; position: fixed; transition: margin-left 1s; width: 60px; writing-mode: vertical-rl;}#waifu-toggle.waifu-toggle-active { margin-left: -50px;}#waifu-toggle.waifu-toggle-active:hover { margin-left: -30px;}#waifu { bottom: -1000px; left: 0; line-height: 0; margin-bottom: -10px; position: fixed; transform: translateY(3px); transition: transform .3s ease-in-out, bottom 3s ease-in-out; z-index: 1000;}#waifu:hover { transform: translateY(0);}#waifu-tips { animation: shake 50s ease-in-out 5s infinite; background-color: rgba(236, 217, 188, .5); border: 1px solid rgba(224, 186, 140, .62); border-radius: 12px; box-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2); font-size: 14px; line-height: 24px; margin: -30px 20px; min-height: 70px; opacity: 0; overflow: hidden; padding: 5px 10px; position: absolute; text-overflow: ellipsis; transition: opacity 1s; width: 250px; word-break: break-all;}#waifu-tips.waifu-tips-active { opacity: 1; transition: opacity .2s;}#waifu-tips span { color: #0099cc;}#waifu #live2d { cursor: grab; height: 280px; position: relative; width: 280px;}#waifu #live2d:active { cursor: grabbing;}#waifu-tool { color: #aaa; opacity: 0; position: absolute; right: -10px; top: 70px; transition: opacity 1s;}#waifu:hover #waifu-tool { opacity: 1;}#waifu-tool span { color: #7b8c9d; cursor: pointer; display: block; line-height: 30px; text-align: center; transition: color .3s;}#waifu-tool span:hover { color: #0684bd; /* #34495e */}@keyframes shake { 2% { transform: translate(.5px, -1.5px) rotate(-.5deg); } 4% { transform: translate(.5px, 1.5px) rotate(1.5deg); } 6% { transform: translate(1.5px, 1.5px) rotate(1.5deg); } 8% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 10% { transform: translate(.5px, 2.5px) rotate(.5deg); } 12% { transform: translate(1.5px, 1.5px) rotate(.5deg); } 14% { transform: translate(.5px, .5px) rotate(.5deg); } 16% { transform: translate(-1.5px, -.5px) rotate(1.5deg); } 18% { transform: translate(.5px, .5px) rotate(1.5deg); } 20% { transform: translate(2.5px, 2.5px) rotate(1.5deg); } 22% { transform: translate(.5px, -1.5px) rotate(1.5deg); } 24% { transform: translate(-1.5px, 1.5px) rotate(-.5deg); } 26% { transform: translate(1.5px, .5px) rotate(1.5deg); } 28% { transform: translate(-.5px, -.5px) rotate(-.5deg); } 30% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 32% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 34% { transform: translate(2.5px, 2.5px) rotate(-.5deg); } 36% { transform: translate(.5px, -1.5px) rotate(.5deg); } 38% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 40% { transform: translate(-.5px, 2.5px) rotate(.5deg); } 42% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 44% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 46% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 48% { transform: translate(2.5px, -.5px) rotate(.5deg); } 50% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 52% { transform: translate(-.5px, 1.5px) rotate(.5deg); } 54% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 56% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 58% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 60% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 62% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 64% { transform: translate(-1.5px, 1.5px) rotate(1.5deg); } 66% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 68% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 70% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 72% { transform: translate(-.5px, -1.5px) rotate(1.5deg); } 74% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 76% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 78% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 80% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 82% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 84% { transform: translate(-.5px, .5px) rotate(1.5deg); } 86% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 88% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 90% { transform: translate(-1.5px, -.5px) rotate(-.5deg); } 92% { transform: translate(-1.5px, -1.5px) rotate(1.5deg); } 94% { transform: translate(.5px, .5px) rotate(-.5deg); } 96% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 98% { transform: translate(-1.5px, -1.5px) rotate(-.5deg); } 0%, 100% { transform: translate(0, 0) rotate(0); }}","link":"/2020-09-23/Hexo+Icarus3+live2d%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"live2d","slug":"live2d","link":"/tags/live2d/"},{"name":"看板娘","slug":"看板娘","link":"/tags/%E7%9C%8B%E6%9D%BF%E5%A8%98/"},{"name":"国际化","slug":"国际化","link":"/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"},{"name":"Feign","slug":"Feign","link":"/tags/Feign/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"SpringCloud","slug":"SpringCloud","link":"/tags/SpringCloud/"},{"name":"Nacos","slug":"Nacos","link":"/tags/Nacos/"},{"name":"注册中心","slug":"注册中心","link":"/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"},{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/tags/SpringBoot/"},{"name":"Filter","slug":"Filter","link":"/tags/Filter/"},{"name":"拦截器","slug":"拦截器","link":"/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"sass","slug":"sass","link":"/tags/sass/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Icarus","slug":"Hexo/Icarus","link":"/categories/Hexo/Icarus/"},{"name":"vue","slug":"vue","link":"/categories/vue/"},{"name":"SpringCloud","slug":"SpringCloud","link":"/categories/SpringCloud/"},{"name":"Nacos","slug":"Nacos","link":"/categories/Nacos/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/categories/SpringBoot/"},{"name":"Feign","slug":"SpringCloud/Feign","link":"/categories/SpringCloud/Feign/"},{"name":"Spring","slug":"Spring","link":"/categories/Spring/"}]}